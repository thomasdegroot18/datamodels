schema {
    query: QueryType
}

type QueryType {
    Organization(iri: ID, orderBy: ID): Organization @iri(prefix : "org")
    School(iri: ID, orderBy: ID) : Organization @iri(prefix : "meemoons", localname: "School")
    ContentPartner(iri: ID, orderBy: ID) : Organization @iri(prefix : "meemoons", localname: "ContentPartner")
}

interface IOrganization {
  label: String                                  
  altLabel: String                                
  mam_label: String                               
  homepage: String                                
  description: String                             
  logo: Logo                                      
  overlay: Boolean                                
  accountManager: Person                          
  classification(id: ID, label:String): Concept   
  units: [OrganizationalUnit]                     
  contactPoint: [ContactPoint]                   
  primarySite: Site                               
  sites: [Site]                                   
  posts: [Post]                                   
}

type Organization implements IOrganization        {
  label: String                                   @iri(prefix : "skos", localname: "prefLabel")
  altLabel: String                                @iri(prefix : "skos")
  mam_label: String                               @iri(prefix : "mh", localname: "label")
  homepage: String                                @iri(prefix : "foaf")
  description: String                             @iri(prefix : "dcterms")
  logo: Logo                                      @iri(prefix : "schema")
  overlay: Boolean                                @iri(prefix : "meemoons")
  accountManager: Person                          @iri(prefix : "meemoons")
  classification(id: ID, label:String): Concept   @iri(prefix : "org")
  units: [OrganizationalUnit]                     @iri(prefix : "org", localname: "hasUnit")
  contactPoint: [ContactPoint]                    @iri(prefix : "schema")
  primarySite: Site                               @iri(prefix : "org", localname: "hasPrimarySite")
  sites: [Site]                                   @iri(prefix : "org", localname: "hasSite")
  posts: [Post]                                   @iri(prefix : "org", localname: "hasPost")
}

type OrganizationalUnit implements IOrganization  {
  label: String                                   @iri(prefix : "skos", localname: "prefLabel")
  altLabel: String                                @iri(prefix : "skos")
  mam_label: String                               @iri(prefix : "mh", localname: "label")
  homepage: String                                @iri(prefix : "foaf")
  description: String                             @iri(prefix : "dcterms")
  logo: Logo                                      @iri(prefix : "schema")
  overlay: Boolean                                @iri(prefix : "meemoons")
  accountManager: Person                          @iri(prefix : "meemoons")
  classification(id: ID, label:String): Concept   @iri(prefix : "org")
  units: [OrganizationalUnit]                     @iri(prefix : "org", localname: "hasUnit")
  contactPoint: [ContactPoint]                    @iri(prefix : "org")
  primarySite: Site                               @iri(prefix : "org", localname: "hasPrimarySite")
  sites: [Site]                                   @iri(prefix : "org", localname: "hasSite")
  posts: [Post]                                   @iri(prefix : "org", localname: "hasPost")
  unitOf: Organization!                           @iri(prefix : "org")
}

type Post                                         {
  role: Concept                                   @iri(prefix : "org")
  postIn: [Organization]!                         @iri(prefix : "org")
}

type Logo                                         {
  type: Concept                                   @iri(prefix : "meemoons", localname: "applicationContext")
  
}

type Person                                       {
  givenName: String                               @iri(prefix : "schema")
  familyName: String                              @iri(prefix : "schema")
  email: String                                   @iri(prefix : "schema")
  holds: [Post]                                   @iri(prefix : "org")
  accountManagerOf: [Organization]                @iri(prefix : "meemoons")
}

type Site                                         {
  address: PostalAddress                          @iri(prefix : "org", localname: "siteAddress")
}

interface IContactPoint {
  contactType: String 
  email: String 
  telephone: String
}

type ContactPoint implements IContactPoint      {
  contactType: String                           @iri(prefix : "schema")
  email: String                                 @iri(prefix : "schema")
  telephone: String                             @iri(prefix : "schema")
}

type PostalAddress implements IContactPoint     {
  contactType: String                           @iri(prefix : "schema")
  email: String                                 @iri(prefix : "schema")
  telephone: String                             @iri(prefix : "schema")
  addressCountry: String                        @iri(prefix : "schema", localname: "addressCountry")
  addressLocality: String                       @iri(prefix : "schema", localname: "addressLocality")
  addressRegion: String                         @iri(prefix : "schema", localname: "addressRegion")
  postOfficeBoxNumber: String                   @iri(prefix : "schema", localname: "postOfficeBoxNumber")
  postalCode: String                            @iri(prefix : "schema", localname: "postalCode")
  streetAddress: String                         @iri(prefix : "schema", localname: "streetAddress")
}

type Concept                                    {
    label: String                               @iri(prefix : "skos", localname: "prefLabel")
    altLabel: String                            @iri(prefix : "skos")
}