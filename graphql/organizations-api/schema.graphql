directive @grasp(service: String, template: String) on OBJECT

type Query {
  organizations(iri: String, id: String): [Organization]
  schools(iri: String, id: String): [School]
  contentpartners(iri: String, id: String): [ContentPartner]
  persons(iri: String, given_name: String, family_name: String): [Person]
}

interface IOrganization {
  iri: ID!
  id: String!
  label: String
  alt_label: String
  mam_label: String
  homepage: String
  description: String
  logo: Logo
  overlay: Boolean
  account_manager: Person
  classification(label: String): Concept
  units: [OrganizationalUnit]
  contact_point: [ContactPoint]
  primary_site: Site
  sites: [Site]
  posts: [Post]
}

type Organization implements IOrganization
  @grasp(service: "meemoo", template: "Organization.sparql") {
  iri: ID!
  id: String!
  label: String
  alt_label: String
  mam_label: String
  homepage: String
  description: String
  logo: Logo
  overlay: Boolean
  account_manager: Person
  classification(label: String): Concept
  units: [OrganizationalUnit]
  contact_point: [ContactPoint]
  primary_site: Site
  sites: [Site]
  posts: [Post]
}

type School implements IOrganization
  @grasp(service: "meemoo", template: "School.sparql") {
  iri: ID!
  id: String!
  label: String
  alt_label: String
  mam_label: String
  homepage: String
  description: String
  logo: Logo
  overlay: Boolean
  account_manager: Person
  classification(label: String): Concept
  units: [OrganizationalUnit]
  contact_point: [ContactPoint]
  primary_site: Site
  sites: [Site]
  posts: [Post]
}

type ContentPartner implements IOrganization
  @grasp(service: "meemoo", template: "ContentPartner.sparql") {
  iri: ID!
  id: String!
  label: String
  alt_label: String
  mam_label: String
  homepage: String
  description: String
  logo: Logo
  overlay: Boolean
  account_manager: Person
  classification(label: String): Concept
  units: [OrganizationalUnit]
  contact_point: [ContactPoint]
  primary_site: Site
  sites: [Site]
  posts: [Post]
}

type OrganizationalUnit implements IOrganization
  @grasp(service: "meemoo", template: "OrganizationalUnit.sparql") {
  iri: ID!
  id: String!
  label: String
  alt_label: String
  mam_label: String
  homepage: String
  description: String
  logo: Logo
  overlay: Boolean
  account_manager: Person
  classification(label: String): Concept
  units: [OrganizationalUnit]
  contact_point: [ContactPoint]
  primary_site: Site
  sites: [Site]
  posts: [Post]
  unit_of: Organization!
}

type Post @grasp(service: "meemoo", template: "Post.sparql") {
  iri: ID!
  role: Concept
  post_in: [Organization]!
}

type Logo @grasp(service: "meemoo", template: "Logo.sparql") {
  iri: ID!
  type: Concept
}

type Person @grasp(service: "meemoo", template: "Person.sparql") {
  iri: ID!
  given_name: String
  family_name: String
  email: String
  holds: [Post]
  account_manager_of: [Organization]
}

type Site @grasp(service: "meemoo", template: "Site.sparql") {
  iri: ID!
  address: PostalAddress
}

interface IContactPoint {
  iri: ID!
  contact_type: String
  email: String
  telephone: String
}

type ContactPoint implements IContactPoint
  @grasp(service: "meemoo", template: "ContactPoint.sparql") {
  iri: ID!
  contact_type: String
  email: String
  telephone: String
}

type PostalAddress implements IContactPoint
  @grasp(service: "meemoo", template: "PostalAddress.sparql") {
  iri: ID!
  contact_type: String
  email: String
  telephone: String
  country: String
  locality: String
  region: String
  post_office_box_number: String
  postal_code: String
  street: String
}

type Concept @grasp(service: "meemoo", template: "Concept.sparql") {
  iri: ID!
  label: String
  alt_label: String
}
